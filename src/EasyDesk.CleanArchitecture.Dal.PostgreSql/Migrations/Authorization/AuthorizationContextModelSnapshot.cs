// <auto-generated />
using EasyDesk.CleanArchitecture.Dal.EfCore.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EasyDesk.CleanArchitecture.Dal.PostgreSql.Migrations.Authorization;

[DbContext(typeof(AuthorizationContext))]
partial class AuthorizationContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasDefaultSchema("auth")
            .HasAnnotation("ProductVersion", "7.0.3")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("EasyDesk.CleanArchitecture.Dal.EfCore.Authorization.Model.RolePermissionModel", b =>
            {
                b.Property<string>("RoleId")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<string>("PermissionName")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<string>("TenantId")
                    .ValueGeneratedOnAdd()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("RoleId", "PermissionName", "TenantId");

                b.HasIndex("TenantId");

                b.ToTable("RolePermissions", "auth");
            });

        modelBuilder.Entity("EasyDesk.CleanArchitecture.Dal.EfCore.Authorization.Model.TenantModel", b =>
            {
                b.Property<string>("Id")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.ToTable("Tenants", "auth");
            });

        modelBuilder.Entity("EasyDesk.CleanArchitecture.Dal.EfCore.Authorization.Model.UserRoleModel", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<string>("TenantId")
                    .ValueGeneratedOnAdd()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("TenantIdFk")
                    .ValueGeneratedOnAdd()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("UserId", "RoleId", "TenantId");

                b.HasIndex("TenantId");

                b.HasIndex("TenantIdFk");

                b.ToTable("UserRoles", "auth");
            });

        modelBuilder.Entity("EasyDesk.CleanArchitecture.Dal.EfCore.Authorization.Model.RolePermissionModel", b =>
            {
                b.HasOne("EasyDesk.CleanArchitecture.Dal.EfCore.Authorization.Model.TenantModel", null)
                    .WithMany()
                    .HasForeignKey("TenantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("EasyDesk.CleanArchitecture.Dal.EfCore.Authorization.Model.UserRoleModel", b =>
            {
                b.HasOne("EasyDesk.CleanArchitecture.Dal.EfCore.Authorization.Model.TenantModel", null)
                    .WithMany()
                    .HasForeignKey("TenantIdFk")
                    .OnDelete(DeleteBehavior.Cascade);
            });
#pragma warning restore 612, 618
    }
}
